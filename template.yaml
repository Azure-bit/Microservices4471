AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'SAM Template for ServerlessStockServiceApp'

# ======================== GLOBAL ======================== #
Globals:
  Function:
    Runtime: python3.8
    Handler: app.lambda_handler
    Timeout: 60  # Default is 3 seconds; adjusted to 60 seconds
    Environment:
      Variables:
        TABLE_NAME: !Ref StocksTable

# ======================== RESOURCES ======================== #
Resources:

  StocksApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      # DefinitionUri: ./swagger.json (if using OpenAPI definition)

  CreateStockFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'CreateStockFunction'
      CodeUri: create_stock/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StocksTable
        - AWSLambdaBasicExecutionRole
      Events:
        CreateStockApi:
          Type: Api
          Properties:
            RestApiId: !Ref StocksApi
            Path: /stock
            Method: post

  GetStockFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'GetStockFunction'
      CodeUri: get_stock/
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref StocksTable
        - AWSLambdaBasicExecutionRole
      Events:
        GetStockApi:
          Type: Api
          Properties:
            RestApiId: !Ref StocksApi
            Path: /stock/{ticker}
            Method: get

  GetStocksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'GetStocksFunction'
      CodeUri: get_stocks/
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref StocksTable
        - AWSLambdaBasicExecutionRole
      Events:
        GetStocksApi:
          Type: Api
          Properties:
            RestApiId: !Ref StocksApi
            Path: /stock/list
            Method: get

  UpdateStockFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'UpdateStockFunction'
      CodeUri: update_stock/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StocksTable
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          ALPHAVANTAGE_API_KEY: !Ref AlphaVantageApiKey
      Events:
        UpdateStockApi:
          Type: Api
          Properties:
            RestApiId: !Ref StocksApi
            Path: /stock/{ticker}
            Method: put

  DeleteStockFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'DeleteStockFunction'
      CodeUri: delete_stock/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StocksTable
        - AWSLambdaBasicExecutionRole
      Events:
        DeleteStockApi:
          Type: Api
          Properties:
            RestApiId: !Ref StocksApi
            Path: /stock/{ticker}
            Method: delete

  CompareStocksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'CompareStocksFunction'
      CodeUri: compare_stocks/
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref StocksTable
        - AWSLambdaBasicExecutionRole
      Events:
        CompareStocksApi:
          Type: Api
          Properties:
            RestApiId: !Ref StocksApi
            Path: /stock/compare
            Method: get

  DiscoverServicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'DiscoverServicesFunction'
      CodeUri: discover_services/  # Path to your Lambda function code
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          NAMESPACE_ID: !Ref NamespaceId  # If needed, add the NamespaceId or other environment variables
      Events:
        DiscoverServicesApi:
          Type: Api
          Properties:
            RestApiId: !Ref StocksApi
            Path: /discover-services
            Method: get

  StocksTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: 'stocks-table'
      PrimaryKey:
        Name: ticker
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

# ======================== PARAMETERS ======================== #
Parameters:
  AlphaVantageApiKey:
    Type: String
    Description: 'API Key for Alpha Vantage API'
  NamespaceId:
    Type: String
    Description: 'Namespace ID for service discovery'
    Default: "ns-ccodzupqwu4kvz3d"

# ======================== OUTPUTS ======================== #
Outputs:
  ApiEndpoint:
    Description: 'API Gateway endpoint URL for Prod stage'
    Value: !Sub 'https://${StocksApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/stock'